name: Release

on:
  push:
    branches: [ "main" ]
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: mcx

jobs:
  # This job runs on push and creates a tag with timestamp
  create-tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get current time
        id: time
        run: echo "timestamp=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_OUTPUT
      
      - name: Create Tag
        id: create_tag
        run: |
          tag_name=${{ steps.time.outputs.timestamp }}
          git tag $tag_name
          git push origin $tag_name
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

  # This job runs when a release is created and builds + uploads binaries
  build-and-upload:
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: mcx
            asset_name: mcx-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: mcx.exe
            asset_name: mcx-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: mcx
            asset_name: mcx-macos-x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare asset for upload
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp ${{ matrix.artifact_name }} ../../${{ matrix.asset_name }}
          else
            cp ${{ matrix.artifact_name }} ../../${{ matrix.asset_name }}
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  # This job creates a release with version from Cargo.toml
  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: create-tag
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Cargo.toml version
        id: get_version
        run: |
          version=$(grep '^version = ' Cargo.toml | cut -d '"' -f 2)
          echo "version=$version" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            Release v${{ steps.get_version.outputs.version }}
            
            Automated release for commit ${{ github.sha }}
            Created at: ${{ needs.create-tag.outputs.tag_name }}
        continue-on-error: true  # Continue even if version tag exists
        
      - name: Create Timestamp Release (Fallback)
        if: ${{ failure() }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.create-tag.outputs.tag_name }}
          release_name: Release ${{ needs.create-tag.outputs.tag_name }}
          draft: false
          prerelease: false
          body: |
            Automated release for commit ${{ github.sha }}
            Created at: ${{ needs.create-tag.outputs.tag_name }}
