name: Release

on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: mcx

jobs:
  # This job runs on push and creates a tag with timestamp
  create-tag:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get current time
        id: time
        run: echo "timestamp=$(date -u +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_OUTPUT
      
      - name: Create Tag
        id: create_tag
        run: |
          tag_name=${{ steps.time.outputs.timestamp }}
          git tag $tag_name
          git push origin $tag_name
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

  # This job checks if we need to create a new release based on version
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check_version.outputs.should_release }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Cargo.toml version
        id: get_version
        run: |
          version=$(sed -n 's/^version = "\([^"]*\)"/\1/p' Cargo.toml)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Check if release needed
        id: check_version
        run: |
          # Get the latest release tag
          latest_release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
            grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/' || echo "none")
          
          # Get current version from previous step
          current_version="${{ steps.get_version.outputs.version }}"
          
          if [ "$latest_release" != "$current_version" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  # This job builds and creates release when version has changed
  build-and-release:
    needs: [create-tag, check-version]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Release v${{ needs.check-version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            Release v${{ needs.check-version.outputs.version }}
            
            Automated release for commit ${{ github.sha }}
            Created at: ${{ needs.create-tag.outputs.tag_name }}
            Released by: ${{ github.actor }}

  # Build jobs for different platforms
  build:
    needs: [check-version, build-and-release]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: mcx
            asset_name: mcx-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: mcx.exe
            asset_name: mcx-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: mcx
            asset_name: mcx-macos-x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare asset for upload
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp ${{ matrix.artifact_name }} ../../${{ matrix.asset_name }}
          else
            cp ${{ matrix.artifact_name }} ../../${{ matrix.asset_name }}
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: target/${{ matrix.asset_name }}
          tag_name: v${{ needs.check-version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
